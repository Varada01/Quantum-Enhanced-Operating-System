qstruct RoutingVars {
  path_cost: qnum<3>;
  congestion: qnum<2>;
}

qfunc apply_cost(gamma: real, v: RoutingVars) {
  aux: qbit;
  within {
    // You can replace the expression with your own custom constraint logic
    aux = ((v.path_cost * 2) + (v.congestion * 3)) <= 12;
  } apply {
    control (aux) {
      phase (-((v.path_cost * 4) + (v.congestion * 6)), gamma);
    }
  }
}

qfunc main(params: real[6], output v: RoutingVars) {
  allocate(v);
  hadamard_transform(v);

  repeat (i: 3) {
    apply_cost(params[0:3][i], v);
    apply_to_all(lambda(q) {
      RX(params[3:6][i], q);
    }, v);
  }
}
